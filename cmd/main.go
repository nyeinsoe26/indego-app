package main

import (
	"encoding/gob"
	"flag"
	"log"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"

	"github.com/nyeinsoe26/indego-app/config"
	"github.com/nyeinsoe26/indego-app/internal/app/api"
	"github.com/nyeinsoe26/indego-app/internal/app/db"
	"github.com/nyeinsoe26/indego-app/internal/app/middlewares/authenticator"
	"github.com/nyeinsoe26/indego-app/internal/app/services"
	"github.com/nyeinsoe26/indego-app/internal/gateways"

	// Swagger-related imports
	_ "github.com/nyeinsoe26/indego-app/docs" // Import docs generated by Swag CLI
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// Register custom types for sessions
func init() {
	gob.Register(map[string]interface{}{})
}

// Initialize and start the cronjob to fetch data every hour using the handler
func startCronJob(handler *api.Handler) {
	go func() {
		for {
			err := handler.FetchAndStoreIndegoWeatherData()
			if err != nil {
				log.Printf("Cronjob failed: %v", err)
			} else {
				log.Println("Cronjob successfully fetched and stored data")
			}
			time.Sleep(1 * time.Hour)
		}
	}()
}

func main() {
	// Load environment variables from .env file
	if err := godotenv.Load(); err != nil {
		log.Fatalf("Failed to load env vars: %v", err)
	}

	// Define the --config flag to get the config file path
	configPath := flag.String("config", "config.yaml", "Path to the configuration file")
	flag.Parse()

	// Load the configuration file
	err := config.LoadConfig(*configPath)
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// Initialize PostgreSQL connection
	database, err := db.NewPostgresDB(config.GetDatabaseConnectionString())
	if err != nil {
		log.Fatalf("Failed to connect to the database: %v", err)
	}
	defer database.Close()

	// Initialize Indego and Weather clients
	indegoClient := gateways.NewIndegoClient()
	weatherClient := gateways.NewWeatherClient()

	// Initialize services
	indegoService := services.NewIndegoService(indegoClient, database)
	weatherService := services.NewWeatherService(weatherClient, database)

	// Initialize handlers
	handler := api.NewHandler(indegoService, weatherService)

	// Initialize the Auth0 Authenticator
	auth, err := authenticator.New()
	if err != nil {
		log.Fatalf("Failed to initialize the authenticator: %v", err)
	}

	// Start the cronjob to fetch and store data every hour
	startCronJob(handler)

	// Initialize Gin router
	router := gin.Default()
	router.LoadHTMLGlob("templates/*")

	// Enable CORS for all origins and methods
	router.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"}, // Allow all origins, or specify the allowed origins
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Authorization", "Content-Type"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour, // Cache preflight response for 12 hours
	}))

	// Swagger route
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Register routes and pass the handler and authenticator
	api.RegisterRoutes(router, handler, auth)

	// Start the server
	err = router.Run(":" + config.AppConfig.Server.Port)
	if err != nil {
		log.Fatalf("Failed to start the server: %v", err)
	}
}
