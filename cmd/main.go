package main

import (
	"context"
	"encoding/gob"
	"flag"
	"log"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"

	"github.com/nyeinsoe26/indego-app/config"
	"github.com/nyeinsoe26/indego-app/internal/app/api"
	"github.com/nyeinsoe26/indego-app/internal/app/db"
	"github.com/nyeinsoe26/indego-app/internal/app/middlewares/authenticator"
	"github.com/nyeinsoe26/indego-app/internal/app/services"
	"github.com/nyeinsoe26/indego-app/internal/gateways"

	// Swagger-related imports
	_ "github.com/nyeinsoe26/indego-app/docs" // Import docs generated by Swag CLI
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// Register custom types for sessions
func init() {
	gob.Register(map[string]interface{}{})
}

// Initialize and start the cronjob to fetch data every hour using the handler
func startCronJob(ctx context.Context, wg *sync.WaitGroup, handler *api.Handler) {
	runCronJob := func() {
		if err := handler.FetchAndStoreIndegoWeatherData(); err != nil {
			log.Printf("Cronjob failed: %v", err)
		} else {
			log.Println("Cronjob successfully fetched and stored data")
		}
	}

	log.Printf("Starting Cronjob to fetch Indego Weather data...")
	wg.Add(1)
	go func() {
		defer wg.Done()

		// immediately run once upon startup
		runCronJob()

		// Create a ticker that ticks every hour
		ticker := time.NewTicker(1 * time.Hour)
		defer ticker.Stop()

		for {
			select {
			case <-ctx.Done(): // Listen for context cancellation
				log.Println("Cronjob is shutting down...")
				return
			case <-ticker.C: // Trigger the cronjob every hour
				runCronJob()
			}
		}
	}()
}

func main() {
	// Load environment variables from .env file
	if err := godotenv.Load(); err != nil {
		log.Fatalf("Failed to load env vars: %v", err)
	}

	// Define the --config flag to get the config file path
	configPath := flag.String("config", "config.yaml", "Path to the configuration file")
	flag.Parse()

	// Load the configuration file
	err := config.LoadConfig(*configPath)
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// Initialize PostgreSQL connection
	database, err := db.NewPostgresDB(config.GetDatabaseConnectionString())
	if err != nil {
		log.Fatalf("Failed to connect to the database: %v", err)
	}
	defer database.Close()

	// Initialize Indego and Weather clients
	indegoClient := gateways.NewIndegoClient()
	weatherClient := gateways.NewWeatherClient()

	// Initialize services
	indegoService := services.NewIndegoService(indegoClient, database)
	weatherService := services.NewWeatherService(weatherClient, database)

	// Initialize handlers
	handler := api.NewHandler(indegoService, weatherService)

	// Initialize the Auth0 Authenticator
	auth, err := authenticator.New()
	if err != nil {
		log.Fatalf("Failed to initialize the authenticator: %v", err)
	}

	// Setup context and wait group for graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	var wg sync.WaitGroup

	// Start the cronjob to fetch and store data every hour
	startCronJob(ctx, &wg, handler)

	// Initialize Gin router
	router := gin.Default()
	router.LoadHTMLGlob("templates/*")

	// Enable CORS for all origins and methods
	router.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"}, // Allow all origins, or specify the allowed origins
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Authorization", "Content-Type"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour, // Cache preflight response for 12 hours
	}))

	// Swagger route
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Register routes and pass the handler and authenticator
	api.RegisterRoutes(router, handler, auth)

	// Start server in a goroutine and send server errors to a channel
	serverErrors := make(chan error, 1)
	go func() {
		serverErrors <- router.Run(":" + config.AppConfig.Server.Port)
	}()

	// Setup channel to listen for interrupt or termination signals (SIGINT, SIGTERM)
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	// Wait for either an OS signal or a server error
	select {
	case err := <-serverErrors:
		// Handle server error
		log.Printf("Server encountered an error: %v", err)
	case sig := <-quit:
		// Handle OS signal (shutdown)
		log.Printf("Shutdown signal (%v) received, shutting down gracefully...", sig)
	}

	// Trigger context cancellation and wait for cronjob to finish
	cancel()
	wg.Wait()

	log.Println("Server shut down successfully.")
}
